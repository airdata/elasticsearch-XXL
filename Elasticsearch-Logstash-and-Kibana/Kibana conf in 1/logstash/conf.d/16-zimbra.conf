################### zimbra ################
filter {
        if [type] == "zimbra-audit" {
    grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => ["message", "%{ZMAUDIT}"]
        add_tag => ["zimbra_audit"]
        remove_tag => [ "unknown" ]
    }
  }
################ zimbra-mailbox ################

  if [type] == "zimbra-mailbox" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => "%{ZIMBRA_MAILBOX_LOG}" }
      add_tag => ["zimbra_mailbox"]
    }
    date {
      match => ["syslog_timestamp",
        "MMM  d HH:mm:ss",
        "MMM dd HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
    }
 mutate {
      replace => { "zimbra_timestamp" => "%{@timestamp}" }
    }
    # for check grok data type conversion bug???
    mutate {
      convert => {
        "zimbra_thread_number" => "integer"
      }
    }

  if [zimbra_account] {
      kv {
        source => "zimbra_account"
        include_keys => [ "ip", "oip", "id", "name", "aid", "aname", "cid", "mid", "ua", "via", "msgid", "item", "ds", "port" ]
        field_split => ";"
        prefix => "zimbra_account_"
        remove_field => [ "zimbra_account" ]
      }
      mutate {
        convert => {
          "zimbra_account_id" => "integer"
          "zimbra_account_aid" => "integer"
          "zimbra_account_cid" => "integer"
          "zimbra_account_mid" => "integer"
          "zimbra_account_port" => "integer"
        }
      }
    }
  if [zimbra_account_ip] {
      geoip {
        database => "/etc/logstash/GeoLiteCity.dat"
        source => "zimbra_account_ip"
        target => "zimbra_geoip"
      }
      mutate {
        add_field => { "zimbra_account_hostname" => "%{zimbra_account_ip}" }
      }
      dns {
        reverse => [ "zimbra_account_hostname" ]
        action => "replace"
      }
    }
  if [zimbra_account_oip] {
      geoip {
        database => "/etc/logstash/GeoLiteCity.dat"
        source => "zimbra_account_oip"
        target => "zimbra_origin_geoip"
      }
       mutate {
        add_field => { "zimbra_account_origin_hostname" => "%{zimbra_account_oip}" }
      }
      dns {
        reverse => [ "zimbra_account_origin_hostname" ]
        action => "replace"
      }
    }
  if [zimbra_trace_log] {
      mutate {
        add_field => { "zimbra_component" => "JAVA-Exception" }
      }
    }
  }

  if [type] == "zimbralog" {
    grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
          add_tag => ["zimbra_log"]
          add_field => [ "received_at", "%{@timestamp}" ]
          add_field => [ "received_from", "%{host}" ]
        }
	syslog_pri { }      
	date {
      match => ["syslog_timestamp",
        "MMM  d HH:mm:ss",
        "MMM dd HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
    }
 mutate {
    replace => { "syslog_timestamp" => "%{@timestamp}" }
    }
#for check grok data type conversion bug???
    mutate {
      convert => {
        "syslog_pid" => "integer"
      }
    }
  }
}