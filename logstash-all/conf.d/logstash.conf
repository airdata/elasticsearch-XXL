################ INPUT ################

input {
  lumberjack {
    port => 5000
    type => "logs"
    ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
    ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
  }
  beats {
    port => 5044
    type => "logs"

  }
}
################ FILTER ################
filter {
if [type] == "syslog" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]
      add_field => [ "received_from", "%{host}" ]
    }
        syslog_pri { }
    date {
      match => ["syslog_timestamp",
        "MMM d HH:mm:ss",
        "MMM  dd HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
    }
  }
  mutate {
     replace => { "syslog_timestamp" => "%{@timestamp}" }
   }
  mutate {
    convert => {
     "syslog_pid" => "integer"
      }
    }

################ POSTFIX ################
 if [syslog_program] =~ /^postfix.*\/smtpd$/ {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "syslog_message" => "%{POSTFIX_SMTPD}" }
    }
    } else if [syslog_program] == "postfix/smtp"
           or [syslog_program] == "postfix/lmtp"
           or [syslog_program] == "postfix/local" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "syslog_message" => "%{POSTFIX_SMTP}" }
     }   
    } else if [syslog_program] == "postfix/bounce" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_BOUNCE}" }
      }
    } else if [syslog_program] == "postfix/qmgr" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_QMGR}" }
      }
    } else if [syslog_program] == "postfix/anvil" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_ANVIL}" }
      }
    } else if [syslog_program] == "postfix/cleanup" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_CLEANUP}" }
      }
    } else if [syslog_program] == "postfix/dnsblog" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_DNSBLOG}" }
      }
    } else if [syslog_program] == "postfix/master" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_MASTER}" }
      }
    } else if [syslog_program] == "postfix/pickup" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_PICKUP}" }
      }
    } else if [syslog_program] == "postfix/pipe" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_PIPE}" }
      }
    } else if [syslog_program] == "postfix/postdrop" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_POSTDROP}" }
      }
    } else if [syslog_program] == "postfix/postscreen" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_POSTSCREEN}" }
      }
    } else if [syslog_program] == "postfix/sendmail" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_SENDMAIL}" }
      }
    } else if [syslog_program] == "postfix/tlsmgr" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TLSMGR}" }
      }
    } else if [syslog_program] == "postfix/tlsproxy" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TLSPROXY}" }
      }
    } else if [syslog_program] == "postfix/trivial-rewrite" {
      grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{POSTFIX_TRIVIAL_REWRITE}" }
      }
    }

    if [syslog_program] =~ /^postfix.*\// {
      mutate {
      	replace => { "type" => "postfix" }
      	}
      # process key-value data is it exists
      if [postfix_keyvalue_data] {
        kv {
          source => "postfix_keyvalue_data"
          include_keys => [ "act", "addr", "class", "client", "conn_use", "delay", "delays", "delim", "depth", "dest", "dest_label", "dest_prop", "domain", "dsn", "dsn_orig", "dsn_ret", "encoding", "endp", "endp_label", "endp_prop", "envid", "family", "fd", "features", "filter", "flags", "from", "func", "helo", "host", "id", "ident", "key", "map", "message-id", "name", "notif", "nrcpt", "num", "off", "orig_id", "orig_to", "pattern", "port", "probed", "prop", "proto", "queue", "rcpt", "realm", "reply", "resent-message-id", "relay", "result", "ret", "score", "sender", "server_flags", "service", "size", "sock", "stat", "status", "stream", "subject", "table", "text", "to", "transp", "uid", "updated", "used", "val", "value", "verify", "weight", "why" ]
          trim => "<>,"
          prefix => "postfix_"
          remove_field => [ "postfix_keyvalue_data" ]
        }
        # some post processing of key-value data
    if [postfix_client] {
       grok {
         patterns_dir => "/etc/logstash/patterns"
         match => { "postfix_client" => "%{POSTFIX_CLIENT_INFO}" }
         tag_on_failure => [ "_grok_kv_postfix_client_nomatch" ]
         remove_field => [ "postfix_client" ]
		 }
        }
        if [postfix_relay] {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "postfix_relay" => "%{POSTFIX_RELAY_INFO}" }
            tag_on_failure => [ "_grok_kv_postfix_relay_nomatch" ]
            remove_field => [ "postfix_relay" ]
          }
        }
        if [postfix_delays] {
          grok {
            patterns_dir => "/etc/logstash/patterns"
            match => { "postfix_delays" => "%{POSTFIX_DELAYS}" }
            tag_on_failure => [ "_grok_kv_postfix_delays_nomatch" ]
            remove_field => [ "postfix_delays" ]
          }
        }
    if [postfix_from] == "" {
        mutate {
        replace => { "postfix_from" => "NULL" }
         }
        }
       }
      # Do some key-value data type conversions & check grok data type conversion bug???
      	mutate {
        convert => {
          "postfix_nrcpt" => "integer"
          "postfix_size" => "integer"
          "postfix_uid" => "integer"
          "postfix_client_port" => "integer"
          "postfix_relay_port" => "integer"
          "postfix_server_port" => "integer"
          "postfix_status_code" => "integer"
          "postfix_postscreen_dnsbl_rank" => "integer"
          "postfix_postscreen_cache_retained" => "integer"
          "postfix_postscreen_cache_dropped" => "integer"
          "postfix_postscreen_violation_time" => "integer"
          "postfix_anvil_conn_rate" => "integer"
          "postfix_anvil_cache_size" => "integer"
          "postfix_anvil_conn_count" => "integer"
          "postfix_termination_signal" => "integer"
          "postfix_scache_hits" => "integer"
          "postfix_scache_miss" => "integer"
          "postfix_scache_success" => "integer"
          "postfix_scache_domains" => "integer"
          "postfix_scache_addresses" => "integer"
          "postfix_scache_connection" => "integer"
          "postfix_delay" => "float"
          "postfix_delay_before_qmgr" => "float"
          "postfix_delay_in_qmgr" => "float"
          "postfix_delay_conn_setup" => "float"
          "postfix_delay_transmission" => "float"
        }
      }
      if [postfix_client_ip] and [postfix_client_ip] != "unknown" {
        geoip {
          database => "/etc/logstash/GeoLiteCity.dat"
          source => "postfix_client_ip"
          target => "postfix_geoip"
        }

  }
}

################ SASL ################

############### zimbra-audit ################
        if [type] == "zimbra-audit" {
    grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => ["message", "%{ZMAUDIT}"]
        add_tag => ["zimbra_audit"]
        remove_tag => [ "unknown" ]
    }
  }
################ zimbra-mailbox ################

  if [type] == "zimbra-mailbox" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => "%{ZIMBRA_MAILBOX_LOG}" }
      add_tag => ["zimbra_mailbox"]
    }
    date {
      match => ["syslog_timestamp",
        "MMM  d HH:mm:ss",
        "MMM dd HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
    }
 mutate {
      replace => { "zimbra_timestamp" => "%{@timestamp}" }
    }
    # for check grok data type conversion bug???
    mutate {
      convert => {
        "zimbra_thread_number" => "integer"
      }
    }

  if [zimbra_account] {
      kv {
        source => "zimbra_account"
        include_keys => [ "ip", "oip", "id", "name", "aid", "aname", "cid", "mid", "ua", "via", "msgid", "item", "ds", "port" ]
        field_split => ";"
        prefix => "zimbra_account_"
        remove_field => [ "zimbra_account" ]
      }
      mutate {
        convert => {
          "zimbra_account_id" => "integer"
          "zimbra_account_aid" => "integer"
          "zimbra_account_cid" => "integer"
          "zimbra_account_mid" => "integer"
          "zimbra_account_port" => "integer"
        }
      }
    }
  if [zimbra_account_ip] {
      geoip {
        database => "/etc/logstash/GeoLiteCity.dat"
        source => "zimbra_account_ip"
        target => "zimbra_geoip"
      }
      mutate {
        add_field => { "zimbra_account_hostname" => "%{zimbra_account_ip}" }
      }
      dns {
        reverse => [ "zimbra_account_hostname" ]
        action => "replace"
      }
    }
  if [zimbra_account_oip] {
      geoip {
        database => "/etc/logstash/GeoLiteCity.dat"
        source => "zimbra_account_oip"
        target => "zimbra_origin_geoip"
      }
       mutate {
        add_field => { "zimbra_account_origin_hostname" => "%{zimbra_account_oip}" }
      }
      dns {
        reverse => [ "zimbra_account_origin_hostname" ]
        action => "replace"
      }
    }
  if [zimbra_trace_log] {
      mutate {
        add_field => { "zimbra_component" => "JAVA-Exception" }
      }
    }
  }

  if [type] == "zimbralog" {
    grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
          add_tag => ["zimbra_log"]
          add_field => [ "received_at", "%{@timestamp}" ]
          add_field => [ "received_from", "%{host}" ]
        }
	syslog_pri { }      
	date {
      match => ["syslog_timestamp",
        "MMM  d HH:mm:ss",
        "MMM dd HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
    }
 mutate {
    replace => { "syslog_timestamp" => "%{@timestamp}" }
    }
#for check grok data type conversion bug???
    mutate {
      convert => {
        "syslog_pid" => "integer"
      }
    }

############## AMAVIS ##########    
  if [syslog_program] == "amavis" {
   	grok {
        patterns_dir => "/etc/logstash/patterns"
        match => { "syslog_message" => "%{AMAVIS}" }
      }
    mutate {
       replace => { "type" => "amavis" }
    }

	mutate {
        convert => {
          "amavis_relay_port" => "integer"
          "amavis_size" => "integer"
          "amavis_delay" => "integer"
          "amavis_hits" => "float"
        }
      }
 
 if [amavis_relay_ip] {
        geoip {
          database => "/etc/logstash/GeoLiteCity.dat"
          source => "amavis_relay_ip"
          target => "amavis_geoip"
        }
        mutate {
          add_field => { "amavis_relay_hostname" => "%{amavis_relay_ip}" }
        }
        dns {
          reverse => [ "amavis_relay_hostname" ]
          action => "replace"
        }
    } else if [syslog_program] == "clamd" {
      mutate {
        replace => { "type" => "clamd" }
      }
    } else if [syslog_program] == "opendkim" {
      mutate {
        replace => { "type" => "opendkim" }
      }
    } else {
      drop {
      }
    }
  }
}
################ HAPROXY ################
if [type] == "haproxy" {
	grok {
		patterns_dir => "/etc/logstash/patterns"
		match => ["syslog_message", "%{HAPROXYHTTP}"]
		named_captures_only => true
	}
	
	geoip {
		source => "client_ip"
		target => "geoip"
		database => "/etc/logstash/GeoLiteCity.dat"
		add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
		add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
	}
	
	mutate {
		convert => [ "[geoip][coordinates]", "float"]
	}
  }
##########fail2ban############
 if [type] == "fail2ban" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => [
      	"message", "%{F2B_DATE:fail2ban_date} %{F2B_ACTION:fail2ban_action}         %{F2B_NUMBER:fail2ban_id} %{WORD:fail2ban_level}    %{F2B_JAIL:fail2ban_program} %{WORD:fail2ban_info} %{IP:fail2ban_ip}",
	  	"message", "%{F2B_DATE:fail2ban_date} %{F2B_ACTION:fail2ban_action}        %{F2B_NUMBER:fail2ban_id} %{WORD:fail2ban_level}  %{F2B_JAIL:fail2ban_program} %{WORD:fail2ban_info} %{IP:fail2ban_ip}"
        ]
    }
    geoip {
      database => "/etc/logstash/GeoLiteCity.dat"
      source => "fail2ban_ip"
      target => "geoip"
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
	  add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float" ]
    }
}
 ################ APACHE ################
 if [type] == "apache" or [type] == "apache-other-vhost" or [type] == "varnish" {
    if [type] == "apache-other-vhost" {
      grok {
        patterns_dir => "/opt/logstash/patterns"
        match => { "message" => "%{APACHE_OTHER_VHOST_EXT}" }
      }
    } else {
      grok {
        patterns_dir => "/opt/logstash/patterns"
        match => { "message" => "%{APACHE_EXT_COMBINED}" }
      }
    }
    mutate {
      replace => { "apache_timestamp" => "%{@timestamp}" }
    }
    if [apache_client_ip] and [apache_client_ip] != "unknown" {
      geoip {
        source => "apache_client_ip"
        target => "apache_bgp"
        database => "/etc/logstash/GeoIPASNum.dat"

      }
      geoip {
        source => "apache_client_ip"
        target => "apache_geoip"
        database => "/etc/logstash/GeoLiteCity.dat"

      }
      mutate {
        add_field => { "apache_client_hostname" => "%{apache_client_ip}" }
      }
      dns {
        reverse => [ "apache_client_hostname" ]
        action => "replace"
      }
    }
    if [apache_agent] {
      useragent {
        source => "apache_agent"
        target => "apache_useragent"
        regexes => “/etc/logstash/regex/regexes-new.yaml"
      }
      ruby {
        code => "
          bot_hash = {
            'libwww\-perl'                      => 'libwww-perl',
            'Wget'                              => 'Wget',
            '^\"\-\"$'                          => 'MINUS',
            'Feedbin'                           => 'Feedbin',
            'Googlebot'                         => 'Googlebot',
            'AhrefsBot'                         => 'AhrefsBot',
            'bingbot'                           => 'bingbot',
            'FreshReader'                       => 'FreshReader',
            '360Spider'                         => '360Spider',
            'Windows\-RSS\-Platform'            => 'Windows-RSS-Platform',
            'Baiduspider'                       => 'Baiduspider',
            'Feedeen'                           => 'Feedeen',
            'Tiny\ Tiny\ RSS'                   => 'Tiny_Tiny_RSS',
            'Feedly'                            => 'Feedly',
            'WordPress'                         => 'WordPress',
            'linkdexbot'                        => 'linkdexbot',
            'Yahoo'                             => 'Yahoo',
            'SemrushBot'                        => 'SemrushBot',
            'Bumble\ Bee'                       => 'Bumble_Bee',
            'Mail\.RU_Bot'                      => 'Mail.RU_Bot',
            'BLEXBot'                           => 'BLEXBot',
            'everrss'                           => 'everrss',
            'MJ12bot'                           => 'MJ12bot',
            'Media\ Center\ PC'                 => 'Media_Center_PC',
            'TurnitinBot'                       => 'TurnitinBot',
            'livedoor\ FeedFetcher'             => 'livedoor_FeedFetcher',
            'DotBot'                            => 'DotBot',
            'Superfeedr\ bot'                   => 'Superfeedr_bot',
            '^\"robots\"$'                      => 'robots',
            'Digg\ Feed\ Fetcher'               => 'Digg_Feed_Fetcher',
            'python\-requests'                  => 'python-requests',
            'Y!J\-'                             => 'Yahoo!_Japan_Bot',
            'Google\ favicon'                   => 'Google_favicon',
            'NerdyBot'                          => 'NerdyBot',
            'spbot'                             => 'spbot',
            'Yandex'                            => 'Yandex',
            'magpie\-crawler'                   => 'magpie-crawler',
            'meanpathbot'                       => 'meanpathbot',
            'com\.apple\.Safari\.SearchHelper'  => 'com.apple.Safari.SearchHelper',
            'AlexaToolbar'                      => 'AlexaToolbar',
            '^\"iPhone\"$'                      => 'iPhone_Fake_google',
            'SurveyBot'                         => 'SurveyBot',
            'com\.apple\.WebKit\.WebContent'    => 'com.apple.WebKit.WebContent',
            'curl'                              => 'curl',
            'Nutch'                             => 'Nutch',
            'archive\.org_bot'                  => 'archive.org_bot',
            'BingPreview'                       => 'BingPreview',
            'Steeler'                           => 'Steeler',
            'Python\-urllib'                    => 'Python-urllib',
            'Python\-httplib'                   => 'Python-httplib',
            'CCBot'                             => 'CCBot',
            'Sage\+\+'                          => 'Sage++',
            'user_agent'                        => 'Program_Miss',
            'special_archiver'                  => 'special_archiver',
            'Cloud\ mapping\ experiment'        => 'Cloud_mapping_experiment',
            'Exabot'                            => 'Exabot',
            'SiteExplorer'                      => 'SiteExplorer',
            'Twitterbot'                        => 'Twitterbot',
            'Lipperhey\-Kaus\-Australis'        => 'Lipperhey-Kaus-Australis',
            'x00_\-gawa\.sa\.pilipinas'         => 'x00_-gawa.sa.pilipinas',
            'DuckDuckGo\-Favicons\-Bot'         => 'DuckDuckGo-Favicons-Bot',
            'ips\-agent'                        => 'ips-agent',
            'RSSingBot'                         => 'RSSingBot',
            'Daumoa'                            => 'Daumoa',
            'Synapse'                           => 'Synapse',
            'ia_archiver'                       => 'ia_archiver',
            'aiHitBot'                          => 'aiHitBot',
            'BDCbot'                            => 'BDCbot',
            'CRAZYWEBCRAWLER'                   => 'CRAZYWEBCRAWLER',
            'FlipboardRSS'                      => 'FlipboardRSS',
            'HTTP_Request2'                     => 'HTTP_Request2',
            '^\"\"$'                            => 'NULL',
            '^\"Mozilla\"$'                     => 'Mozilla_Fake_google',
            '^\"Mozilla/\d\.\d\"$'              => 'Mozilla_Fake_CN',
            '^\"\"Mozilla'                      => 'Mis_Mozilla',
            '^\"\\\"Mozilla'                    => 'Mis2_Mozilla',
            '^\"=Mozilla'                       => 'Miss_Mozilla',
            '^\"Hatena'                         => 'Hatena',
            'Java'                              => 'Java',
            'CakePHP'                           => 'CakePHP',
            'Apache-HttpClient'                 => 'Apache-HttpClient',
            '^\"PHP'                            => 'PHP',
            '^\"gecko'                          => 'gecko',
            'WinHttp\.WinHttpRequest'           => 'WinHttp.WinHttpRequest',
            'Jakarta\ Commons\-HttpClient'      => 'Jakarta_Commons-HttpClient',
            'Google\-Site\-Verification'        => 'Google-Site-Verification',
            'Google\ Favicon'                   => 'Google_Favicon',
            'GoogleImageProxy'                  => 'GoogleImageProxy',
            'AppEngine\-Google'                 => 'AppEngine-Google',
            'Slackbot\-LinkExpanding'           => 'Slackbot-LinkExpanding',
            'MS\ Search\ \d\.\d\ Robot'         => 'MS_Search_Robot',
            'Acidbot3'                          => 'Acidbot3',
            'AdnormCrawler'                     => 'AdnormCrawler',
            'Ahrefs\-Bot'                       => 'Ahrefs-Bot',
            'Applebot'                          => 'Applebot',
            'BCKLINKS'                          => 'BCKLINKS',
            'BOT\ for\ JCE'                     => 'BOT_for_JCE',
            'BPImageWalker'                     => 'BPImageWalker',
            'BlackCrawler'                      => 'BlackCrawler',
            'Blekkobot'                         => 'Blekkobot',
            'BoardReader\ Blog\ Indexer'        => 'BoardReader_Blog_Indexer',
            'BusinessBot'                       => 'BusinessBot',
            'CMS\ Crawler'                      => 'CMS_Crawler',
            'Claritybot'                        => 'Claritybot',
            'DialogSearch\.com\ Bot'            => 'DialogSearch.com_Bot',
            'Digincore\ bot'                    => 'Digincore_bot',
            'Digincore\ crawler\ bot'           => 'Digincore_crawler_bot',
            'DomainAppender'                    => 'DomainAppender',
            'DomainMacroCrawler'                => 'DomainMacroCrawler',
            'DomainSigmaCrawler'                => 'DomainSigmaCrawler',
            'ENVCheck'                          => 'ENVCheck_envc.dip.jp',
            'Embedly'                           => 'Embedly',
            'Feedspot'                          => 'Feedspot',
            'Findxbot'                          => 'Findxbot',
            'GOFORITBOT'                        => 'GOFORITBOT',
            'GarlikCrawler'                     => 'GarlikCrawler',
            'GetURLInfo'                        => 'GetURLInfo',
            'GigablastOpenSource'               => 'GigablastOpenSource',
            'GimmeUSAbot'                       => 'GimmeUSAbot',
            'Go\ \d\.\d\ package\ http'         => 'Go_package_http',
            'Hatena\ Pagetitle\ Agent'          => 'Hatena_Pagetitle_Agent',
            'Hatena\ Star\ UserAgent'           => 'Hatena_Star_UserAgent',
            'HeartRails_Capture'                => 'HeartRails_Capture',
            'Hivemind'                          => 'Hivemind',
            'HubSpot\ Links\ Crawler'           => 'HubSpot_Links_Crawler',
            'HyperCrawl'                        => 'HyperCrawl',
            'ICC\-Crawler'                      => 'ICC-Crawler',
            'Indy\ Library'                     => 'Indy_Library',
            'InetURL'                           => 'InetURL',
            'Internet\-wide\-scan\-to\-be\-removed\-from\-this\-list\-email\-info\-at\-binaryedge\.io' => 'binaryedge',
            'Kyoto\-Crawler'                    => 'Kyoto-Crawler',
            'Kyoto\-Tohoku\-Crawler'            => 'Kyoto-Tohoku-Crawler',
            'LSSRocketCrawler'                  => 'LSSRocketCrawler',
            'LinkWalker'                        => 'LinkWalker',
            'MSIECrawler'                       => 'MSIECrawler',
            'MegaIndex\.ru'                     => 'MegaIndex.ru',
            'Microsearch\.ru\ Bot'              => 'Microsearch.ru_Bot',
            'MixrankBot'                        => 'MixrankBot',
            'Mnogosearch'                       => 'Mnogosearch',
            'MojeekBot'                         => 'MojeekBot',
            'Morfeus\ Fucking\ Scanner'         => 'Morfeus_Fucking_Scanner',
            'Morfeus\ strikes\ again'           => 'Morfeus_strikes_again',
            'NetResearchServer'                 => 'NetResearchServer',
            'NetcraftSurveyAgent'               => 'NetcraftSurveyAgent',
            'Netcraft\ Web\ Server\ Survey'     => 'Netcraft_Web_Server_Survey',
            'Netseer\ crawler'                  => 'NetSeer_crawler',
            'Newsify'                           => 'Newsify',
            'PageAnalyzer'                      => 'PageAnalyzer',
            'PagesInventory'                    => 'PagesInventory',
            'PiplBot'                           => 'PiplBot',
            'Plukkie'                           => 'Plukkie',
            'Qwantify'                          => 'Qwantify',
            'R6_CommentReader'                  => 'R6_CommentReader',
            'R6_FeedFetcher'                    => 'R6_FeedFetcher',
            'Readability'                       => 'Readability',
            'SEOkicks\-Robot'                   => 'SEOkicks-Robot',
            'SMTBot'                            => 'SMTBot',
            'Scanning\ for\ research'           => 'researchscan',
            'Scopia\ Crawler'                   => 'Scopia_Crawler',
            'ScoutJet'                          => 'ScoutJet',
            'Scrapy'                            => 'Scrapy',
            'Screaming\ Frog\ SEO\ Spider'      => 'Screaming_Frog_SEO_Spider',
            'ScreenerBot'                       => 'ScreenerBot',
            'SeznamBot'                         => 'SeznamBot',
            'ShortLinkTranslate'                => 'ShortLinkTranslate',
            'SlideGur'                          => 'SlideGur',
            'Sogou\ web\ spider'                => 'Sogou_web_spider',
            'SpiderLing'                        => 'SpiderLing',
            'SputnikBot'                        => 'SputnikBot',
            'Stratagems\ Kumo'                  => 'Stratagems_Kumo',
            'Telesphoreo'                       => 'Telesphoreo',
            'Telesphorep'                       => 'Telesphorep',
            'TopServer\ PHP'                    => 'TopServer_PHP',
            'Unknown\/X-Agent'                  => 'Unknown_X-Agent',
            'WBSearchBot'                       => 'WBSearchBot',
            'WWWC'                              => 'WWWC',
            'WWW\-Mechanize'                    => 'WWW-Mechanize',
            'WebCapture'                        => 'WebCapture',
            'WebIndex'                          => 'WebIndex',
            'WebTarantula\.com'                 => 'WebTarantula.com',
            'Wotbox'                            => 'Wotbox',
            'Xenu\ Link\ Sleuth'                => 'Xenu_Link_Sleuth',
            'XoviBot'                           => 'XoviBot',
            'YisouSpider'                       => 'YisouSpider',
            'Zend_Http_Client'                  => 'Zend_Http_Client',
            'ZmEu'                              => 'ZmEu',
            'Zollard'                           => 'Linux.Trojan.Zollard',
            'alsRobot2'                         => 'alsRobot2',
            'bot\-pge\.chlooe\.com'             => 'bot-pge.chlooe.com',
            'crawler4j'                         => 'crawler4j',
            'facebookexternalhit'               => 'facebookexternalhit',
            'finbot'                            => 'finbot',
            'heritrix'                          => 'heritrix',
            'honzilla\ download\ bot'           => 'honzilla_download_bot',
            'iZSearch\.com'                     => 'iZSearch.com',
            'ichiro'                            => 'goo',
            'izsearch\.com'                     => 'izsearch.com',
            'linkapediabot'                     => 'linkapediabot',
            'ltx71'                             => 'ltx71',
            'masscan'                           => 'masscan',
            'mobile\ goo'                       => 'mobile_goo',
            'moukrest\.ru'                      => 'moukrest.ru',
            'msnbot'                            => 'msnbot',
            'munRobot'                          => 'munRobot',
            'netEstate\ NE\ Crawler'            => 'netEstate_NE_Crawler',
            'nlpproject\.info\ research'        => 'nlpproject.info_research',
            'oBot'                              => 'oBot',
            'ocrawler'                          => 'ocrawler',
            'panscient\.com'                    => 'panscient.com',
            'probethenet\.com\ scanner'         => 'probethenet.com_scanner',
            'psbot'                             => 'psbot',
            'rogerbot'                          => 'rogerbot',
            'scrutiny'                          => 'scrutiny',
            'voltron'                           => 'voltron',
            'woobot'                            => 'woobot',
            'wp\-poster'                        => 'wp-poster',
            'yacybot'                           => 'yacybot',
            'zgrab'                             => 'zgrab'
          }
          bot_hash.each do |bot_re, bot_name|
            if event['apache_agent'] =~ /#{bot_re}/
              event['apache_robot'] = bot_name
              break
            end
          end
        "
      }
    }
    if [apache_request] {
      ruby {
        code => "event['apache_extension'] = File.extname(event['apache_request'].split('?')[0]).delete('.')"
      }
      if [apache_extension] == "" or [apache_extension] !~ /^[a-zA-Z0-9]{1,4}$/ {
        mutate {
          remove_field => [ "apache_extension" ]
        }
      }
    }
  }

  if [type] == "apache-error" {
    grok {
      patterns_dir => "/opt/logstash/patterns/"
      match => { "message" => "%{APACHE_ERROR}" }
    }
    mutate {
      replace => { "apache_error_timestamp" => "%{@timestamp}" }
    }
    if [apache_error_client_ip] and [apache_error_client_ip] != "unknown" {
      geoip {
        source => "apache_error_client_ip"
        target => "apache_error_bgp"
        database => "/etc/logstash/GeoIPASNum.dat"

      }
      geoip {
        source => "apache_error_client_ip"
        target => "apache_error_geoip"
        database => "/etc/logstash/GeoLiteCity.dat"

      }
       mutate {
        add_field => { "apache_error_client_hostname" => "%{apache_error_client_ip}" }
      }
      dns {
        reverse => [ "apache_error_client_hostname" ]
        action => "replace"
      }
    }
  }


    if [type] == "apache" {
                grok {
                                        patterns_dir => ["/etc/logstash/patterns/"]
                                        match => ["message", "%{COMBINEDAPACHELOG}"]#
                }
                geoip {
                        source => "clientip"
                        target => "geoip"
                        database => "/etc/logstash/GeoLiteCity.dat"
                        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                }
    date {
      match => ["syslog_timestamp",
        "MMM dd HH:mm:ss",
        "MMM  d HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
}
#                date {
#                        match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
#                }
                grok {
                        match => [
                                "message", "%{DATA:apache_vhost} "
          ]
    }
}
############ NGINX ###############

  if [type] == "nginx-access" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => "%{NGINXACCESS}" }
      add_tag => ["nginx_access"]
    }

   geoip {
     source => "clientip"
     target => "geoip"
     database => "/etc/logstash/GeoLiteCity.dat"
     add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
     add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
   }

   date {
      match => ["syslog_timestamp",
        "MMM  d HH:mm:ss",
        "MMM dd HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
   }
 }

   if [type] == "nginx-error" {
    grok {  
	match => [
	"message", "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<clientip>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request}) ??(?:, host: %{QS:host})",	
	"message", "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: (?<clientip>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})(?:, upstream: %{QS:upstream})(?:;, host: %{QS:host})(?:, referrer: \"%{URI:referrer})"
	 ]
	overwrite => [ "message" ]
	add_tag => [ "nginx_error" ]
    }
    
    geoip {
     source => "clientip"
     target => "geoip"
     database => "/etc/logstash/GeoLiteCity.dat"
     add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
     add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    date {
		match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
		remove_field => [ "timestamp" ]
		}
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
   }
 }

################### PHP ################

  mutate {
    gsub => [
      "message", "/var/www", "",
      "message", "/var/www", "",
      "path",    "/var/www", ""
    ]
  }

  if "_grokparsefailure" in [tags] {
      grok {
        match => [ "message", "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) PHP message: PHP %{DATA:level}\:  %{GREEDYDATA:err}" ]
        add_tag => [ "%{level}" ]
      }
       multiline {
        pattern => "(Stack trace:)|(^#.+)|(^\"\")|(  thrown+)|(^\s)"
        what => "previous"
      }
      date {
                match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
        target => "@timestamp"
        remove_field => "timestamp"
      }
  }

  mutate {
    uppercase => [ "level" ]
    lowercase => [ "tags" ]
    gsub => [
      "tags",  " ", "_",
      "level", " ", "_"
    ]
  }

 ################MUTATE################

  if "_grokparsefailure" in [tags] {
    grok {
        patterns_dir => ["/etc/logstash/patterns/"]
        match => ["syslog_message", "%{SYSLOGBASE}"]
        add_tag => ["unknown"]
    }
  }

  	date {
    	match => [ "created_at",
    	"MMM d HH:mm:ss",
        "MMM  dd HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
        ]
		target => "@timestamp"
		remove_field => [ "created_at" ]
  }

  	mutate {
    	convert => {
        "rcpt_qty" => "integer"
        "nrcpt" => "integer"
        "bytes" => "integer"
        "elapsed" => "integer"
        "offset" => "integer"
        "size" => "integer"
        "delay" => "float"
         }
	
	}

}

################ OUTPUT ################
#output {
#  elasticsearch {
#    hosts => "https://f2656ef2f2f3acfdf93d4d2e911ddc27.us-east-1.aws.found.io:9243"
#    template => "/etc/logstash/elasticsearch-template.json"
#    template_overwrite => true
#    index => "logstash-%{+YYYY.MM.dd}"
#    user => "admin"
#    password => "back2facK"
#  }
#stdout { codec => rubydebug }
#}


output {
  elasticsearch {
    hosts => ["172.17.0.12:9200", "93.152.197.193:9200"]
    template => "/etc/logstash/elasticsearch-template.json"
    template_overwrite => true
}
}

# stdout { codec => rubydebug }


