filter {
  if [type] == "nginx-access" {
    grok {
      patterns_dir => "/etc/logstash/patterns"
      match => { "message" => "%{NGINXACCESS}" }
      add_tag => ["nginx-access"]
    }

   geoip {
     source => "clientip"
     target => "geoip"
     database => "/etc/logstash/GeoLiteCity.dat"
     add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
     add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
   }

   date {
      match => ["syslog_timestamp",
        "MMM  d HH:mm:ss",
        "MMM dd HH:mm:ss",
        "MMM  d yyyy HH:mm:ss",
        "MMM dd yyyy HH:mm:ss",
        "yyyy-MM-dd HH:mm:ss,SSS",
        "ISO8601",
        "dd/MMM/yyyy:HH:mm:ss Z"
      ]
    }
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
   }
 }

   if [type] == "nginx-error" {
    grok {
    match => [ "message" , "(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, clientip: (?<clientip>%{IP}|%{HOSTNAME}))(?:, server: %{IPORHOST:server})(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")"]
    overwrite => [ "message" ]
    add_tag => ["nginx-error"]    
}
     
    date {
    match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
    remove_field => [ "timestamp" ]
    }    
    geoip {
     source => "clientip"
     target => "geoip"
     database => "/etc/logstash/GeoLiteCity.dat"
     add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
     add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
    }
    date {
		match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss" ]
		remove_field => [ "timestamp" ]
		}
    mutate {
      convert => [ "[geoip][coordinates]", "float"]
   }
 }
}

